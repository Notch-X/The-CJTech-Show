@inject HttpClient _client

<h3>Organizers</h3>

<EditForm Model="@organizerModel" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <fieldset disabled="@Disabled">
        <div class="form-group">
            <label>Organizer Name: </label>
            <div>
                <InputText @bind-Value="@organizerModel.OrganizerName" class="form-control" />
                <ValidationMessage For="@(() => organizerModel.OrganizerName)" />
            </div>
        </div>

        <div class="form-group">
            <label>Contact Number: </label>
            <div>
                <InputText @bind-Value="@organizerModel.OrganizerContactNumber" class="form-control" />
                <ValidationMessage For="@(() => organizerModel.OrganizerContactNumber)" />
            </div>
        </div>

        <div class="form-group">
            <label>Position: </label>
            <div>
                <InputText @bind-Value="@organizerModel.OrganizerPosition" class="form-control" />
                <ValidationMessage For="@(() => organizerModel.OrganizerPosition)" />
            </div>
        </div>

        <div class="form-group">
            <label>Email: </label>
            <div>
                <InputText @bind-Value="@organizerModel.OrganizerEmail" class="form-control" />
                <ValidationMessage For="@(() => organizerModel.OrganizerEmail)" />
            </div>
        </div>
        <div class="form-group">
            <label>Password: </label>
            <div>
                <InputText @bind-Value="@organizerModel.OrganizerPassword" class="form-control" />
                <ValidationMessage For="@(() => organizerModel.OrganizerPassword)" />
            </div>
        </div>



    </fieldset>

    @if (!Disabled)
    {
        <button type="submit" class="btn btn-success btn-block">
            @ButtonText
        </button>
    }
</EditForm>

@code {
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public Organizer organizerModel { get; set; } = new Organizer();
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback<EditContext> OnValidSubmit { get; set; }
    private IList<Organizer>? Organizers;

    protected async override Task OnInitializedAsync()
    {
        Organizers = await _client.GetFromJsonAsync<List<Organizer>>($"{Endpoints.OrganizersEndpoint}");
    }
}
